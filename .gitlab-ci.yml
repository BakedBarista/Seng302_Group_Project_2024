stages:
  - tagChecking
  - build
  - test
  - sonarqube
  - deploy

workflow:
  rules:
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'

tag-checker:
  stage: tagChecking
  script:
    - python3 tag_checker.py $CI_COMMIT_TAG
  only:
    - tags

junit:
  stage: test
  script:
    - ./gradlew unit integration cucumber
    - ls ./build/jacoco
  artifacts:
    paths:
      - build/jacoco/test-report.xml

sonarqube-check:
  stage: sonarqube
  variables:
    GIT_STRATEGY: clone # clone entire repo instead of reusing workspace
    GIT_DEPTH: 0 # avoid shallow clone to give sonar all the info it needs
  script:
    - ./gradlew sonar

# builds all branches, except dev and main
branch-build:
  stage: build
  script:
    - ./gradlew bootJar
  artifacts:
    paths:
      - build/libs
  except:
    - tags
    - main
    - dev

deploy-staging:
  stage: deploy
  script:
    - ./gradlew bootJar
    - rm -rf /home/gitlab-runner/staging/ || true
    - mkdir /home/gitlab-runner/staging/
    - cp -r ./build/libs /home/gitlab-runner/staging
    - cp runner-scripts/staging.sh /home/gitlab-runner/staging.sh
    - chmod u+x /home/gitlab-runner/staging.sh
    - ./runner-scripts/generate-env.sh staging
    - sudo systemctl restart staging
  artifacts:
    paths:
      - build/libs
  only:
    - no-websockets

deploy-production:
  stage: deploy
  script:
    - ./gradlew bootJar
    - rm -rf /home/gitlab-runner/production/ || true
    - mkdir /home/gitlab-runner/production/
    - cp -r ./build/libs /home/gitlab-runner/production
    - cp runner-scripts/production.sh /home/gitlab-runner/production.sh
    - chmod u+x /home/gitlab-runner/production.sh
    - ./runner-scripts/generate-env.sh production
    - sudo systemctl restart production
  artifacts:
    paths:
      - build/libs
  only:
    - tags
