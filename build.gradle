import org.gradle.api.tasks.testing.logging.TestExceptionFormat

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
  id 'org.sonarqube' version '4.0.0.2929'
}

group = 'nz.ac.canterbury.seng302.team-800'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.h2database:h2'
	implementation 'org.mariadb.jdbc:mariadb-java-client:3.3.3'
	implementation 'org.webjars:bootstrap:5.3.3'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// Spring Boot Starter Mail
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	// JSON deserialization (for external REST API, lab 6)
	implementation 'com.fasterxml.jackson.core:jackson-core:2.16.1'
	implementation 'com.fasterxml.jackson.core:jackson-annotations:2.16.1'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'

	// JSON deserialization (for external REST API, lab 6)
	implementation 'com.fasterxml.jackson.core:jackson-core:2.16.1'
	implementation 'com.fasterxml.jackson.core:jackson-annotations:2.16.1'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Cucumber
	testImplementation 'io.cucumber:cucumber-java:7.15.0'
	// testImplementation 'io.cucumber:cucumber-spring:7.15.0'
	testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.15.0'
	testImplementation 'org.junit.platform:junit-platform-suite:1.10.2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

tasks.register("cucumber", Test) {
    testLogging.showStandardStreams = true
    useJUnitPlatform()
    filter {
        includeTestsMatching "nz.ac.canterbury.seng302.gardenersgrove.cucumber.*"
    }
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat TestExceptionFormat.FULL
    }
}

jacocoTestReport {
	dependsOn test

	reports {
		xml.required = true
		xml.destination = file("$buildDir/jacoco/test-report.xml")
		csv.required = false
		html.destination = file("$buildDir/jacoco/html")
	}
}

sonar {
  properties {
    property "sonar.projectKey", "seng302-2024-team800"
		property "sonar.projectName", "seng302-2024-team800"
		property "sonar.sourceEncoding", "UTF-8"
    property "sonar.host.url", "https://sonarqube.csse.canterbury.ac.nz"
		property "sonar.login", "$System.env.SONARQUBE_TOKEN"
  }
}

task dev(type: org.springframework.boot.gradle.tasks.run.BootRun, dependsOn: 'bootRun') {
	group = 'Application'
	description = 'Runs the application with the dev profile'
	environment "SPRING_PROFILES_ACTIVE", "dev"
}