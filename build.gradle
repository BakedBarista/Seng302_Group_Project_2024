import org.gradle.api.tasks.testing.logging.TestExceptionFormat

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
	id 'org.sonarqube' version '4.0.0.2929'
}

group = 'nz.ac.canterbury.seng302.team-800'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'com.h2database:h2'
	implementation 'org.mariadb.jdbc:mariadb-java-client:3.3.3'
	implementation 'org.webjars:bootstrap:5.3.3'
	implementation 'org.webjars:jquery:3.7.1'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// Spring Boot Starter Mail
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	// JSON deserialization (for external REST API, lab 6)
	implementation 'com.fasterxml.jackson.core:jackson-core:2.16.1'
	implementation 'com.fasterxml.jackson.core:jackson-annotations:2.16.1'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Cucumber
	testImplementation 'io.cucumber:cucumber-java:7.15.0'
	testImplementation 'io.cucumber:cucumber-spring:7.15.0'
	testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.15.0'
	testImplementation 'org.junit.platform:junit-platform-suite:1.10.2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named("check") {
	dependsOn unit, integration, cucumber
}

// for backwards compatability with running single tests / class of tests - doesn't generate coverage report
tasks.named("test", Test) {
	useJUnitPlatform()
	filter {
		includeTestsMatching("nz.ac.canterbury.seng302.gardenersgrove.unittests.*")
		includeTestsMatching("nz.ac.canterbury.seng302.gardenersgrove.integrationtests.*")
	}
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
	}
}

tasks.register('unit', Test) {
	useJUnitPlatform()
	filter {
		includeTestsMatching "nz.ac.canterbury.seng302.gardenersgrove.unittests.*"
	}
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
	}
	finalizedBy unitTestReport
}

tasks.register("integration", Test) {
	useJUnitPlatform()
	filter {
		includeTestsMatching "nz.ac.canterbury.seng302.gardenersgrove.integrationtests.*"
	}
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
	}
	finalizedBy integrationTestReport
}

tasks.register("cucumber", Test) {
	testLogging.showStandardStreams = true
	useJUnitPlatform()
	filter {
		includeTestsMatching "nz.ac.canterbury.seng302.gardenersgrove.cucumber.*"
	}
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
		exceptionFormat TestExceptionFormat.FULL
	}
	finalizedBy cucumberTestReport
}

tasks.register("unitTestReport", JacocoReport) { // Generate a report for unit tests
	group = 'verification'

	onlyIf { // Allow the report to be skipped when -PskipTestReport is passed via commandline
		return !project.hasProperty('skipTestReport')
	}

	dependsOn unit

	executionData project.tasks.unit

	sourceDirectories.setFrom(project.files(project.sourceSets.main.allSource.srcDirs))
	classDirectories.setFrom(project.sourceSets.main.output)

	reports {
		xml.required = true
		// The jacoco coverage report will ge generated in the destination below
		html.destination file("${buildDir}/reports/coverage/junit")
	}
}
tasks.register("integrationTestReport", JacocoReport) { // Generate a report for integration tests
	group = 'verification'

	onlyIf { // Allow the report to be skipped when -PskipTestReport is passed via commandline
		return !project.hasProperty('skipTestReport')
	}

	dependsOn integration

	executionData project.tasks.integration

	sourceDirectories.setFrom(project.files(project.sourceSets.main.allSource.srcDirs))
	classDirectories.setFrom(project.sourceSets.main.output)

	reports {
		xml.required = true
		// The jacoco coverage report will ge generated in the destination below
		html.destination file("${buildDir}/reports/coverage/integration")
	}
}


tasks.register("cucumberTestReport", JacocoReport) { // Generate a report for cucumber tests
	group = 'verification'

	onlyIf { // Allow the report to be skipped when -PskipTestReport is passed via commandline
		return !project.hasProperty('skipTestReport')
	}

	dependsOn cucumber

	executionData project.tasks.cucumber

	sourceDirectories.setFrom(project.files(project.sourceSets.main.allSource.srcDirs))
	classDirectories.setFrom(project.sourceSets.main.output)

	reports {
		xml.required = true
		// The jacoco coverage report will ge generated in the destination below
		html.destination file("${buildDir}/reports/coverage/cucumber")
	}
}



jacocoTestReport { // Generate a report for all generated test data
	onlyIf { // Allow the report to be skipped when -PskipTestReport is passed via commandline
		return !project.hasProperty('skipTestReport')
	}

	mustRunAfter unit, integration, cucumber // end2end

	executionData fileTree(project.rootDir) {
		include '**/*.exec'
	}
	reports {
		xml.required = true
		xml.destination file("$buildDir/jacoco/test-report.xml")
		html.destination file("${buildDir}/reports/coverage/overall")
	}
}

// Ensure jacocoTestReport is ran after each specific test report.
// The 'overall' coverage will then include each of the test tasks ran.
tasks.named("unitTestReport").configure { finalizedBy "jacocoTestReport" }
tasks.named("integrationTestReport").configure { finalizedBy "jacocoTestReport" }
tasks.named("cucumberTestReport").configure { finalizedBy "jacocoTestReport" }

sonar {
	properties {
		property "sonar.projectKey", "seng302-2024-team800"
		property "sonar.projectName", "seng302-2024-team800"
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.host.url", "https://sonarqube.csse.canterbury.ac.nz"
		property "sonar.login", "$System.env.SONARQUBE_TOKEN"
		property "sonar.sources", "src/main/java,src/main/resources"
		property "sonar.qualitygate.wait", "true"
	}
}